Onde:

routes.js ‚Üí define as rotas (GET, POST, PUT, DELETE) com fun√ß√µes bem simples

app.js ‚Üí sobe o servidor e usa o roteador

Tudo usando s√≥ import/export padr√£o, sem complica√ß√£o.

RODANDO O ARQUIVO: node src/app.js ou npx nodemon src/app.js


Primeiro passo:
criar uma pasta package.json atrav√©s de npm init -y

O que faz?
Cria o arquivo package.json, que:

Diz que este diret√≥rio √© um projeto Node.js

Armazena as depend√™ncias do projeto

Guarda os scripts que usamos com npm run

O -y?
Aceita todas as op√ß√µes padr√£o (nome, vers√£o, etc.)

Voc√™ pode editar depois

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Segundo passo:
instalar o express atrav√©s de npm install express

O que faz?
Instala o Express, que √© o micro framework que usamos para:

Criar o servidor

Criar rotas HTTP

Lidar com requisi√ß√µes/respostas de forma f√°cil

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Terceiro passo:
instalar o nodemon para o servidor recarregar sozinho quando salvar atrav√©s de npm install nodemon -D (-D pq ser√° uma depend√™ncia de desenvolvimento, n√£o queremos que v√° para produ√ß√£o)

O que √© nodemon?
√â um utilit√°rio que reinicia o servidor automaticamente sempre que um arquivo muda.

Assim voc√™ n√£o precisa toda hora parar e rodar de novo node app.js.

E o -D?
Significa:

‚ÄúInstala como depend√™ncia de desenvolvimento‚Äù

Ou seja:

nodemon s√≥ √© usado durante o desenvolvimento

Ele n√£o vai ser necess√°rio em produ√ß√£o (quando o projeto estiver rodando em um servidor real)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Quarto passo:
configurar o package.json para usar import/export
"type": "module"

"type": "module" no package.json
Por que isso?
O Node.js por padr√£o usa o sistema antigo de m√≥dulos:

const express = require('express')
Mas com "type": "module", a gente diz pro Node:

"Queremos usar o sistema moderno de m√≥dulos do JavaScript (ES Modules)"

Ou seja, com isso a gente pode usar:
import express from 'express'
export default ...
‚úÖ Mais limpo, mais moderno e √© o padr√£o atual de bibliotecas.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Quinto passo:
scripts": { "dev": "nodemon src/app.js" }
Pra que isso?
Assim voc√™ pode rodar o projeto com:

npm run dev
Ao inv√©s de digitar npx nodemon src/app.js toda vez.

√â um atalho, um script personalizado.

O que √© um Middleware?
‚úÖ Defini√ß√£o simples:
Um middleware √© uma fun√ß√£o intermedi√°ria que roda antes de chegar na rota final.

Ela pode:

Verificar algo (ex: valida√ß√£o, autentica√ß√£o)

Modificar a requisi√ß√£o (req) ou a resposta (res)

Bloquear ou deixar passar

Chamar a pr√≥xima etapa com next()

Em c√≥digo, a estrutura de um middleware √©:
function nomeDoMiddleware(req, res, next) {
  // faz algo com req ou res

  // se estiver tudo certo, deixa seguir
  next()
}

tapa 5 ‚Äì Integra√ß√£o com Banco de Dados
üì¶ Tecnologias que vamos usar:
SQLite: banco leve, n√£o precisa instalar nada externo

Prisma ORM: pra manipular o banco de forma simples e organizada

üß∞ Etapas da configura√ß√£o:
‚úÖ 1. Instalar o Prisma
No terminal, dentro da pasta do seu projeto:

bash
Copy code
npm install prisma --save-dev
npx prisma init
Isso vai criar uma pasta chamada prisma/ com o arquivo schema.prisma, e o .env.

‚úÖ 2. Instalar o cliente Prisma
bash
Copy code
npm install @prisma/client
Esse √© quem vai permitir que sua aplica√ß√£o se conecte ao banco.

‚úÖ 3. Configurar o banco no .env
Abra o arquivo .env que foi criado e altere a linha:

env
Copy code
DATABASE_URL="file:./dev.db"
Pode deixar exatamente assim, ele criar√° um arquivo dev.db dentro da pasta do projeto.


O que √© prisma?
O Prisma √© uma ferramenta que ajuda a gente a conversar com o banco de dados usando JavaScript/Node.
Sem Prisma, voc√™ teria que escrever comandos como:
INSERT INTO tarefas (titulo, descricao, concluida) VALUES (...)
Com o Prisma, a gente usa comandos em JavaScript, tipo:
prisma.tarefa.create({...})

O que √© uma migra√ß√£o no contexto de banco de dados?
Migra√ß√£o √© um registro de mudan√ßa na estrutura do banco de dados.

Sempre que voc√™ altera o que existe no banco (como criar uma tabela, renomear um campo, adicionar uma coluna), voc√™ precisa "migrar" essa altera√ß√£o para o banco de dados real.

üì¶ Exemplo pr√°tico:
Voc√™ escreve isso no schema.prisma:

prisma
Copy
Edit
model Tarefa {
  id         Int      @id @default(autoincrement())
  titulo     String
  descricao  String
  concluido  Boolean  @default(false)
}
Mas o banco ainda est√° assim:

bash
Copy
Edit
id | titulo | descricao | concluida
Ou seja, o banco ainda tem concluida com ‚Äúa‚Äù, e n√£o tem o campo concluido.

üõ†Ô∏è O que a migra√ß√£o faz?
Quando voc√™ roda:

bash
Copy
Edit
npx prisma migrate dev --name renomear_concluida
O Prisma:

Detecta a diferen√ßa entre seu schema atual e o banco

Gera um script SQL pra corrigir isso

Executa esse script e atualiza o banco de dados real

üß† Analogia simples:
O schema.prisma √© o projeto arquitet√¥nico da sua casa.
A migra√ß√£o √© o pedreiro executando as mudan√ßas (levantar parede nova, quebrar outra, etc).

‚úÖ Quando voc√™ faz uma migra√ß√£o?
Criou um model novo? ‚Üí precisa migrar.

Adicionou um campo? ‚Üí precisa migrar.

Mudou o nome de um campo? ‚Üí precisa migrar.

Apagou uma coluna? ‚Üí precisa migrar.

üìÅ Onde ficam armazenadas?
O Prisma guarda cada migra√ß√£o em uma pasta prisma/migrations/, com o nome que voc√™ escolheu, tipo:

bash
Copy
Edit
prisma/migrations/20250429_renomear_concluida/
Assim voc√™ tem um hist√≥rico de tudo que j√° mudou no banco.

‚úÖ Resumo final:
Conceito	O que √©
Migra√ß√£o	Atualiza√ß√£o da estrutura do banco baseada no schema.prisma
Quando usar	Sempre que mudar o model no schema.prisma
Como rodar	npx prisma migrate dev --name nome_da_migracao
